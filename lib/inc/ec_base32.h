
#ifndef __BASE_32_H__
#define __BASE_32_H__

#include <ec_core.h>


namespace ecCore {

// == == == == == == == == == == == == == == == == ==
/*

Base32: (RFC 3548 / RFC 4648)

    1               2               3               4               5
  +---------------+---------------+---------------+---------------+---------------+
B |7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|  8 Bit
  +---------+-----+---+---------+-+-------+-------+-+---------+---+-----+---------+
  |         |         |         |         |         |         |         |         |
  +---------+---------+---------+---------+---------+---------+---------+---------+
A |4 3 2 1 0|4 3 2 1 0|4 3 2 1 0|4 3 2 1 0|4 3 2 1 0|4 3 2 1 0|4 3 2 1 0|4 3 2 1 0|  5 Bit
  +---------+---------+---------+---------+---------+---------+---------+---------+
    1         2         3         4         5         6         7         8

  MASK = 00011111B = 0x1F

encode:
 A1 = B1 >> 3
   [ A2 = (B1 << 2) & 00011100B (0x1C) ]
 A2 = (B1 << 2 | B2 >> 6) & MASK
 A3 = (B2 >> 1) & MASK
   [ A4 = (B2 << 4) & 00010000B (0x10) ]
 A4 = (B2 << 4 | B3 >> 4) & MASK
   [ A5 = (B3 << 1) & 00011110B (0x1E) ]
 A5 = (B3 << 1 | B4 >> 7) & MASK
 A6 = (B4 >> 2) & MASK
   [ A7 = (B4 << 3) & 00011000B (0x18) ]
 A7 = (B4 << 3 | B5 >> 5) & MASK
 A8 = B5 & MASK

decode:
 B1 = A1 << 3 | A2 >> 2
 B2 = A2 << 6 | A3 << 1 | A4 >> 4
 B3 = A4 << 4 | A5 >> 1
 B4 = A5 << 7 | A6 << 2 | A7 >> 3
 B5 = A7 << 5 | A8

*/
// == == == == == == == == == == == == == == == == ==

class Base32 {

private:

//////////////////////////////////
// Data

    static uchar* base32_str;
    static uchar base32_str_back[128];

//////////////////////////////////

public:

//////////////////////////////////
// Procedures

    static bool isValid(const QString& str, bool robust);
    static QString encode(const QString& str, bool add_crlf);
    static QString decode(const QString& str, bool robust);

//////////////////////////////////

};

// == == == == == == == == == == == == == == == == ==

} // ecCore

#endif
